package com.mycompany.a1;

import com.codename1.charts.models.Point;
import com.codename1.charts.util.ColorUtil;
import java.util.Random;
import java.util.ArrayList;

/**
 * The GameWorld class manages all game objects, state, and game logic.
 */
public class GameWorld {
	
	private ArrayList<GameObject> gameObject; // Stores all game objects
	private Random rand = new Random(); // Random generator for object properties
	private int gameTick = 0; // Tracks elapsed game time
	private int playerLives = 3; // Initial player lives count
	
	/**
	 * Default constructor for GameWorld.
	 */
	public GameWorld() {}
	
	/**
	 * Initializes all game objects and adds them to the list.
	 */
	public void init() {
		gameObject = new ArrayList<>();
		// Create flags with predefined locations and sequence numbers
		gameObject.add(new Flag(25, new Point(100,100), ColorUtil.rgb(0, 0, 255), 1));
		gameObject.add(new Flag(25, new Point(900,100), ColorUtil.rgb(0, 0, 255), 2));
		gameObject.add(new Flag(25, new Point(100,900), ColorUtil.rgb(0, 0, 255), 3));
		gameObject.add(new Flag(25, new Point(900,900), ColorUtil.rgb(0, 0, 255), 4));
		// Create an Ant at a fixed starting position
		gameObject.add(new Ant(25, new Point(50, 50), ColorUtil.rgb(128,128,128), 0, 1, 25));
		// Create Spiders at random positions
		gameObject.add(new Spider(25, new Point(rand.nextInt(1000), rand.nextInt(1000)), ColorUtil.rgb(255, 255, 255), rand.nextInt(360), 5, 100));
		gameObject.add(new Spider(25, new Point(rand.nextInt(1000), rand.nextInt(1000)), ColorUtil.rgb(255, 255, 255), rand.nextInt(360), 5, 100));
		// Create FoodStations with random attributes
		gameObject.add(new FoodStation(rand.nextInt(41) + 10, new Point(rand.nextInt(1000), rand.nextInt(1000)), ColorUtil.rgb(0, 255, 0)));
		gameObject.add(new FoodStation(rand.nextInt(41) + 10, new Point(rand.nextInt(1000), rand.nextInt(1000)), ColorUtil.rgb(0, 255, 0)));
	}
	
	/**
	 * Handles acceleration of the Ant.
	 */
	public void accelerate() {
		for (GameObject obj : gameObject) {
			if (obj instanceof Ant) {
				((Ant) obj).accelerate();
				System.out.println("Ant has sped up");
			}
		}
	}
	
	/**
	 * Handles braking of the Ant.
	 */
	public void brake() {
		for (GameObject obj : gameObject) {
			if (obj instanceof Ant) {
				((Ant) obj).brake();
				System.out.println("Ant has slowed down");
			}
		}
	}
	
	/**
	 * Handles turning left.
	 */
	public void turnLeft() {
		for (GameObject obj : gameObject) {
			if (obj instanceof Ant) {
				((Ant) obj).turnLeft();
				System.out.println("Ant turned left. Heading: " + ((Ant) obj).getHeading());
			}
		}
	}
	
	/**
	 * Handles turning right.
	 */
	public void turnRight() {
		for (GameObject obj : gameObject) {
			if (obj instanceof Ant) {
				((Ant) obj).turnRight();
				System.out.println("Ant turned right. Heading: " + ((Ant) obj).getHeading());
			}
		}
	}
	
	/**
	 * Handles food station collision.
	 */
	public void foodStationCollision() {
		Ant ant = null;
		for (GameObject obj : gameObject) {
			if (obj instanceof Ant) {
				ant = (Ant) obj;
				break;
			}
		}
		boolean foundFood = false;
		for (GameObject obj : gameObject) {
			if (obj instanceof FoodStation) {
				FoodStation station = (FoodStation) obj;
				if (station.getCapacity() > 0) {
					ant.foodStationCollision(station.getCapacity());
					station.setCapacity();
					foundFood = true;
					break;
				}
			}
		}
		System.out.println(foundFood ? "Ant increased food level." : "All FoodStations are empty.");
	}
	
	/**
	 * Handles spider collision.
	 */
	public void spiderCollision() {
		for (GameObject obj : gameObject) {
			if (obj instanceof Ant) {
				Ant ant = (Ant) obj;
				ant.spiderCollision();
				System.out.println("Ant collided with a Spider and lost health!");
				if (ant.getHealthLevel() <= 0) loseLife();
				break;
			}
		}
	}
	
	/**
	 * Handles game clock tick.
	 */
	public void tickedClock() {
		gameTick++;
		System.out.println("Game Clock Tick: " + gameTick);
		for (GameObject obj : gameObject) {
			if (obj instanceof Spider) ((Spider) obj).move();
			if (obj instanceof Ant) {
				Ant ant = (Ant) obj;
				ant.move();
				ant.setFoodConsumption(1);
				if (ant.getFoodLevel() == 0) loseLife();
			}
		}
	}
}
